/*
 * ================================================================================================
 *  WARNING: This file is automatically generated by cbindgen. Manual edits are likely to be lost.
 * ================================================================================================
 */

#ifndef LAKERS_SHARED_H
#define LAKERS_SHARED_H

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#define MAX_MESSAGE_SIZE_LEN (128 + 64)

#define ID_CRED_LEN 4

#define SUITES_LEN 9

#define SUPPORTED_SUITES_LEN 1

#define EDHOC_METHOD 3

#define P256_ELEM_LEN 32

#define SHA256_DIGEST_LEN 32

#define AES_CCM_KEY_LEN 16

#define AES_CCM_IV_LEN 13

#define AES_CCM_TAG_LEN 8

#define MAC_LENGTH 8

#define MAC_LENGTH_2 MAC_LENGTH

#define MAC_LENGTH_3 MAC_LENGTH_2

#define ENCODED_VOUCHER_LEN (1 + MAC_LENGTH)

#define MAX_KDF_CONTEXT_LEN 150

#define MAX_KDF_LABEL_LEN 15

#define MAX_BUFFER_LEN 256

#define CBOR_BYTE_STRING 88

#define CBOR_TEXT_STRING 120

#define CBOR_UINT_1BYTE 24

#define CBOR_NEG_INT_1BYTE_START 32

#define CBOR_NEG_INT_1BYTE_END 55

#define CBOR_UINT_1BYTE_START 0

#define CBOR_UINT_1BYTE_END 23

#define CBOR_MAJOR_TEXT_STRING 96

#define CBOR_MAJOR_BYTE_STRING 64

#define CBOR_MAJOR_BYTE_STRING_MAX 87

#define CBOR_MAJOR_ARRAY 128

#define CBOR_MAJOR_ARRAY_MAX 151

#define MAX_INFO_LEN ((((((2 + SHA256_DIGEST_LEN) + 1) + MAX_KDF_LABEL_LEN) + 1) + MAX_KDF_CONTEXT_LEN) + 1)

#define ENC_STRUCTURE_LEN ((8 + 5) + SHA256_DIGEST_LEN)

#define MAX_EAD_SIZE_LEN 64

#define EAD_ZEROCONF_LABEL 1

#define EAD_ZEROCONF_INFO_K_1_LABEL 0

#define EAD_ZEROCONF_INFO_IV_1_LABEL 1

#define EAD_ZEROCONF_ENC_STRUCTURE_LEN ((2 + 8) + 3)

typedef enum CredentialTransfer {
  ByReference,
  ByValue,
} CredentialTransfer;

/**
 * An owned u8 vector of a limited length
 *
 * It is used to represent the various messages in encrypted and in decrypted form, as well as
 * other data items. Its maximum length is [MAX_MESSAGE_SIZE_LEN].
 */
typedef struct EdhocMessageBuffer {
  uint8_t content[MAX_MESSAGE_SIZE_LEN];
  uintptr_t len;
} EdhocMessageBuffer;

typedef uint8_t BytesMac[MAC_LENGTH];

typedef uint8_t BytesMac2[MAC_LENGTH_2];

typedef uint8_t BytesP256ElemLen[P256_ELEM_LEN];

typedef struct CredentialRPK {
  struct EdhocMessageBuffer value;
  BytesP256ElemLen public_key;
  uint8_t kid;
} CredentialRPK;

typedef uint8_t BytesSuites[SUITES_LEN];

typedef struct InitiatorStart {
  BytesSuites suites_i;
  uintptr_t suites_i_len;
  BytesP256ElemLen x;
  BytesP256ElemLen g_x;
} InitiatorStart;

typedef uint8_t BytesHashLen[SHA256_DIGEST_LEN];

typedef struct WaitM2 {
  BytesP256ElemLen x;
  BytesHashLen h_message_1;
} WaitM2;

typedef struct Completed {
  BytesHashLen prk_out;
  BytesHashLen prk_exporter;
} Completed;

typedef struct ProcessedM2 {
  BytesHashLen prk_3e2m;
  BytesHashLen prk_4e3m;
  BytesHashLen th_3;
} ProcessedM2;

#endif /* LAKERS_SHARED_H */
